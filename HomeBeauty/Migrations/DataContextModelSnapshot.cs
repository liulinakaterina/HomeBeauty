// <auto-generated />
using System;
using HomeBeauty.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HomeBeauty.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HomeBeauty.Entities.Allergen", b =>
                {
                    b.Property<int>("AllergenId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChemicalId");

                    b.Property<string>("Name");

                    b.Property<int>("UserId");

                    b.HasKey("AllergenId");

                    b.HasIndex("ChemicalId");

                    b.HasIndex("UserId");

                    b.ToTable("Allergens");
                });

            modelBuilder.Entity("HomeBeauty.Entities.CareProduct", b =>
                {
                    b.Property<int>("CareProductId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("CareProductId");

                    b.ToTable("CareProducts");
                });

            modelBuilder.Entity("HomeBeauty.Entities.Chemicals", b =>
                {
                    b.Property<int>("ChemicalsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Formula");

                    b.Property<string>("Name");

                    b.Property<string>("Properties");

                    b.HasKey("ChemicalsId");

                    b.ToTable("Chemicals");
                });

            modelBuilder.Entity("HomeBeauty.Entities.Compound", b =>
                {
                    b.Property<int>("CompoundId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount");

                    b.Property<int>("CareProductId");

                    b.Property<int>("ChemicalId");

                    b.Property<string>("Unit");

                    b.HasKey("CompoundId");

                    b.HasIndex("CareProductId");

                    b.HasIndex("ChemicalId");

                    b.ToTable("Compounds");
                });

            modelBuilder.Entity("HomeBeauty.Entities.Cure", b =>
                {
                    b.Property<int>("CureId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CareProductId");

                    b.Property<string>("DosageType");

                    b.Property<double>("DosageValue");

                    b.Property<int>("TreatmentId");

                    b.HasKey("CureId");

                    b.HasIndex("CareProductId");

                    b.HasIndex("TreatmentId");

                    b.ToTable("Cures");
                });

            modelBuilder.Entity("HomeBeauty.Entities.Device", b =>
                {
                    b.Property<int>("DeviceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IMEI");

                    b.Property<DateTime>("ProductionDate");

                    b.HasKey("DeviceId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("HomeBeauty.Entities.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HospitalId");

                    b.Property<string>("Qualification");

                    b.Property<int>("UserId");

                    b.HasKey("DoctorId");

                    b.HasIndex("HospitalId");

                    b.HasIndex("UserId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("HomeBeauty.Entities.Hospital", b =>
                {
                    b.Property<int>("HospitalId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.HasKey("HospitalId");

                    b.ToTable("Hospitals");
                });

            modelBuilder.Entity("HomeBeauty.Entities.Illness", b =>
                {
                    b.Property<int>("IllnessId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsCured");

                    b.Property<string>("Name");

                    b.Property<string>("Symptoms");

                    b.Property<int>("UserId");

                    b.HasKey("IllnessId");

                    b.HasIndex("UserId");

                    b.ToTable("Illnesses");
                });

            modelBuilder.Entity("HomeBeauty.Entities.Treatment", b =>
                {
                    b.Property<int>("TreatmentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DoctorId");

                    b.Property<int>("IllnessId");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("TreatmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("IllnessId");

                    b.ToTable("Treatments");
                });

            modelBuilder.Entity("HomeBeauty.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<DateTime>("Birthday");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Role");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("HomeBeauty.Entities.WaterReception", b =>
                {
                    b.Property<int>("WaterReceptionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeviceId");

                    b.Property<string>("Information");

                    b.Property<DateTime>("Time");

                    b.Property<int>("UserId");

                    b.HasKey("WaterReceptionId");

                    b.HasIndex("DeviceId");

                    b.HasIndex("UserId");

                    b.ToTable("WaterReceptions");
                });

            modelBuilder.Entity("HomeBeauty.Entities.Allergen", b =>
                {
                    b.HasOne("HomeBeauty.Entities.Chemicals", "Chemicals")
                        .WithMany("Allergens")
                        .HasForeignKey("ChemicalId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HomeBeauty.Entities.User", "User")
                        .WithMany("Allergens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HomeBeauty.Entities.Compound", b =>
                {
                    b.HasOne("HomeBeauty.Entities.CareProduct", "CareProduct")
                        .WithMany("Compounds")
                        .HasForeignKey("CareProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HomeBeauty.Entities.Chemicals", "Chemicals")
                        .WithMany("Compounds")
                        .HasForeignKey("ChemicalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HomeBeauty.Entities.Cure", b =>
                {
                    b.HasOne("HomeBeauty.Entities.CareProduct", "CareProduct")
                        .WithMany("Cures")
                        .HasForeignKey("CareProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HomeBeauty.Entities.Treatment", "Treatment")
                        .WithMany("Cures")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HomeBeauty.Entities.Doctor", b =>
                {
                    b.HasOne("HomeBeauty.Entities.Hospital", "Hospital")
                        .WithMany("Doctors")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HomeBeauty.Entities.User", "User")
                        .WithMany("Doctors")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("HomeBeauty.Entities.Illness", b =>
                {
                    b.HasOne("HomeBeauty.Entities.User", "User")
                        .WithMany("Illnesses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HomeBeauty.Entities.Treatment", b =>
                {
                    b.HasOne("HomeBeauty.Entities.Doctor", "Doctor")
                        .WithMany("Treatments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HomeBeauty.Entities.Illness", "Illness")
                        .WithMany("Treatments")
                        .HasForeignKey("IllnessId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HomeBeauty.Entities.WaterReception", b =>
                {
                    b.HasOne("HomeBeauty.Entities.Device", "Device")
                        .WithMany("WaterReceptions")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HomeBeauty.Entities.User", "User")
                        .WithMany("WaterReceptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
